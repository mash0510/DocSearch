@model DocSearch.Models.DocSearchModel

@{
    ViewBag.Title = "Document Search";
}

<!-- 検索キーワード入力部分 -->
<div class="row">
    <div class="col-md-7">
        @using (Html.BeginForm("Index", "DocSearch", FormMethod.Get))
        {
            <div class="form-group input-group">
                @Html.TextBoxFor(m => m.InputKeywords, new { id = "keywordTextBox", @class="form-control", placeholder = "キーワード" })
                @Html.HiddenFor(m => m.Page, new { @Value = "1" })
                <span class="input-group-btn">
                    <button class="btn btn-default" type="submit">検索</button>
                </span>
            </div>
        }
    </div>
    <div class="col-md-1">
        <input class="btn btn-default" type="button" value="フォルダ" onclick="openDialog()"/>
    </div>
    <div class="col-md-1">
        <input class="btn btn-default" type="button" value="選択クリア" onclick="folderClear()" />
    </div>
    <div class="col-md-3">
        @if (Model.SearchExecuted)
        {
            <label>@Model.Total 件ヒット</label>
        }
    </div>
</div>

<div class="row">
    <div class="col-md-2">
      <label id="searchFolderLabel"></label>  
    </div>
    <div class="col-md-10">
        <span id="searchFolder"></span>
    </div>
</div>

<div class="row">
    <!-- 検索結果表示部分 -->
    <div class="col-md-9">
        @if (Model.SearchExecuted)
        {
            <ul>
                @foreach(var result in Model.SearchedDocument)
                {
                    <li>
                        <a href="@result.FileFullPath" target="_blank">@result.FileName</a>
                        <div class="ds-updateddate">更新日 : @result.UpdatedDate</div>
                        <p class="ds-docsummary">
                            @result.DocSummary
                        </p>
                    </li>
                }
            </ul>
        }
    </div>

    <!-- 関連語表示 -->
    <div class="col-md-3  ds-relatedwords">
        @if (Model.SearchExecuted)
        {
            <h4>関連語</h4>
            foreach (var keyword in Model.InputKeywordList)
            {
                <h5>@keyword</h5>
                <ul>
                        @foreach (var relatedWord in Model.RelatedWordList(keyword, 10))
                        {
                            <li><label><input type="checkbox" value="@relatedWord" onclick="wordSelect(this)" />@relatedWord</label></li>
                        }
                </ul>
            }
        }
    </div>
</div>

<div class="row">
    <div class="col-md-10 col-md-offset-1">
        @if (Model.SearchExecuted)
        {
            <ul class="pagination">
                @foreach (var pageNo in Model.PageList)
                {
                    if (pageNo == Model.Page)
                    {
                        <li class="active">@Html.ActionLink(pageNo.ToString(), "Index", "DocSearch", new { InputKeywords = @Model.InputKeywords, page = pageNo.ToString() }, null)</li>
                    }
                    else
                    {
                        <li>@Html.ActionLink(pageNo.ToString(), "Index", "DocSearch", new { InputKeywords = @Model.InputKeywords, page = pageNo.ToString() }, null)</li>
                    }
                }
            </ul>
        }
    </div>
</div>

@{
    if (Model != null && Model.FileTreeViewModel != null)
    {
        Html.RenderPartial("~/Views/DocSearch/GetFiles.cshtml", Model.FileTreeViewModel);
    }
}

<div id="dialog-form" title="Folder Select">
    <div id="container_id"></div>
</div>

<script type="text/javascript">
    var dialog;
    var selectedFolder = "";

    // 関連語の選択時の処理
    function wordSelect(selectedWord) {
        var keywords = $('#keywordTextBox').val();

        if (selectedWord.checked)
            keywords = keywords + " " + selectedWord.value;
        else
            keywords = keywords.replace(" " + selectedWord.value, "");

        // 検索キーワードテキストボックスへの選択した関連語の追加
        $('#keywordTextBox').val(keywords);
    }

    // 選択した検索先フォルダ情報を消去する（= 全フォルダが検索対象になる）
    function folderClear() {
        selectedFolder = "";
        folderSelect();
    }

    // 選択した検索先フォルダの表示
    function dispSelectedFolder(folder) {
        if (folder != "") {
            $('#searchFolderLabel').html("検索先フォルダ");
            $('#searchFolder').html(folder);
        }
        else {
            $('#searchFolderLabel').html("");
            $('#searchFolder').html("");
        }
    }

    // フォルダ選択ダイアログを開く
    function openDialog() {
        dialog.dialog("open");
    }

    // フォルダ選択ダイアログの選択ボタンクリック
    function folderSelect() {
        $.ajax({
            url: '/DocSearch/SetSearchFolder',
            traditional: true,
            type: 'POST',
            dataType: 'HTML',
            data: { selectedFolder: selectedFolder}
        }).done(function (result) {
            dispSelectedFolder(selectedFolder);
            dialog.dialog("close");
        });
    }

    // フォルダ選択ダイアログの表示
    window.onload = function () {
        dialog = $("#dialog-form").dialog({
            autoOpen: false,
            height: 300,
            width: 350,
            modal: true,
            buttons: {
                "Select": folderSelect,
                Cancel: function () {
                    dialog.dialog("close");
                }
            },
            close: function () {
            }
        });

        $('#container_id').fileTree({
            root: [@Html.Raw(Model.SearchRootFolders)],
            script: '/DocSearch/GetFiles',
            expandSpeed: 100,
            collapseSpeed: 100,
            multiFolder: false,
            onlyFolders: true,
            traditional: true
        },
        function (path, isFolder) {
            if (isFolder) {
                selectedFolder = path;
            }
        });
    };
</script>
