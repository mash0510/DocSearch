@model DocSearch.Models.SetupModel

@{
    ViewBag.Title = "Setup";
}

<h2 style="margin-bottom: 20px">設定画面</h2>

<!-- クロール先フォルダの指定 -->
<div class="ds-container">
    <h4>クロール先のフォルダの指定</h4>
    @using (Html.BeginForm("SetupCrawlFolder", "Setup", FormMethod.Post))
    {
        <div class="form-group">
            <label class="control-label">クロール先のフォルダを指定して下さい。改行で複数のフォルダを指定出来ます。</label>
            @Html.TextAreaFor(m => m.CrawlFolders, new { @class = "form-control", rows = "5", id="crawlFoldersTextBox" })
        </div>
        <button type="submit" id="folderApplyButton" class="btn btn-default right">適用</button>
    }
</div>

<!-- クロール開始 -->
<div class="ds-container">
    <h4>クロール処理の開始</h4>
    @using (Html.BeginForm("StartCrawl", "Setup", FormMethod.Post))
    {
        <div class="form-group">
            <div class="row">
                <div class="col-md-3">
                    <label class="control-label">クロール後の関連語学習</label>
                </div>
                <div class="col-md-2">
                   @Html.DropDownListFor(m => m.ExecMachineLearning,
                     new SelectListItem[] {
                        new SelectListItem() { Value="0", Text="しない" },
                        new SelectListItem() { Value="1", Text="する" }
                     },
                     new { @class="form-control", id="execMachineLearningOption" })
                </div>
                <div class="col-md-1 text-center">
                    <button type="button" id="crawlStartButton" class="btn btn-default" onclick="StartCrawl()">開始</button>
                </div>
                <div class="col-md-1 text-center">
                    <button type="button" id="crawlCancelButton" class="btn btn-default" onclick="CancelCrawl()">キャンセル</button>
                </div>
                <div class="col-md-1 text-center">
                    <button type="button" id="crawlHistoryButton" class="btn btn-default" onclick="GetHistoryData('Crawl')">履歴</button>
                </div>
            </div>
            <br />
            <div class="row">
                <div id="crawlProgressBar">
                    <div class="col-md-7">
                        <div class="progress progress-striped active" id="progressType">
                            <div class="progress-bar" id="progressBar" role="progressbar" style="width: 0%;">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <label class="progress-rate" id="progressRate"></label>
                    </div>
                </div>
            </div>
       </div>
    }
</div>

<div class="ds-container">
    <h4>関連語学習の開始</h4>
    @using (Html.BeginForm("StartMachineLearning", "Setup", FormMethod.Post))
    {
        <div class="form-group">
            <div class="row">
                <div class="col-md-5">
                    <label class="control-label">関連語を表示する人工知能の学習の実行</label>
                </div>
                <div class="col-md-1 text-center">
                    <button type="button" id="machineLearningStartButton" class="btn btn-default" onclick="StartMachineLearning()">開始</button>
                </div>
                <div class="col-md-1 text-center">
                    <button type="button" id="machineLearningCancelButton" class="btn btn-default" onclick="CancelMachineLearning()">キャンセル</button>
                </div>
                <div class="col-md-1 text-center">
                    <button type="button" id="crawlHistoryButton" class="btn btn-default" onclick="GetHistoryData('word2vec')">履歴</button>
                </div>
            </div>
            <br />
            <div class="row">
                <div id="machineLearningProgressBar">
                    <div class="col-md-7">
                        <div class="progress progress-striped active" id="progressType">
                            <div class="progress-bar" id="progressBar" role="progressbar" style="width: 0%;">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <label class="progress-rate" id="progressRate"></label>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- スケジューリング設定 -->
<div class="container">
    <h4>スケジュール設定</h4>
    <div id="scheduling">
        <div class="row">
            <div class="col-md-1">
                @Html.DropDownListFor(m => m.ScheduleType,
                    new SelectListItem[]
                    {
                        new SelectListItem() { Value="none", Text="非実行" },
                        new SelectListItem() { Value="oneTime", Text="1回のみ" },
                        new SelectListItem() { Value="date", Text="日毎" },
                        new SelectListItem() { Value="day", Text="曜日" },
                        new SelectListItem() { Value="detail", Text="詳細設定" }
                    },
                    new { id= "schedule-select", onchange = "ScheduleTypeChanged(this)" }
               )
            </div>
            <div class="col-md-11">
                <div id="schedule-oneTime">
                    @Html.TextBoxFor(m => m.OneTimeDateTime, new { type = "datetime-local", id = "schedule-oneTime-input" })
                </div>
                <div id="schedule-daily">
                    <div class="row">
                        <div class="col-xs-3">
                            @Html.TextBoxFor(m => m.DayInterval, new { type = "text", id = "schedule-daily-interval" })
                            <lable class="ds-label">日毎</lable>
                        </div>
                        <div class="col-xs-9">
                            <label class="ds-label">実行時間</label>
                            @Html.TextBoxFor(m => m.ExecTimeDaily, new { type = "time", id = "schedule-daily-time" })
                        </div>
                    </div>
                </div>
                <div id="schedule-day">
                    @Html.CheckBoxFor(m => m.ExecMonday, new { value = "mon" })月
                    @Html.CheckBoxFor(m => m.ExecTuesday, new { value = "tue", style = "margin-left: 10px" })火
                    @Html.CheckBoxFor(m => m.ExecWendnesday, new { value = "wed", style = "margin-left: 10px" })水
                    @Html.CheckBoxFor(m => m.ExecThursday, new { value = "thr", style = "margin-left: 10px" })木
                    @Html.CheckBoxFor(m => m.ExecFriday, new { value = "fri", style = "margin-left: 10px" })金
                    @Html.CheckBoxFor(m => m.ExecSurtarday, new { value = "sat", style = "margin-left: 10px" })土
                    @Html.CheckBoxFor(m => m.ExecSunday, new { value = "sun", style = "margin-left: 10px" })日
                    <label class="ds-label">実行時間</label>
                    @Html.TextBoxFor(m => m.ExecTimeDay, new { type = "time", id = "schedule-day-time" })
                </div>
                <div id="schedule-detail">
                    <label class="ds-label">crontab形式で指定して下さい。</label>
                    @Html.TextBoxFor(m => m.CronString, new { type = "text", id = "schedule-cron", style = "width:300px" })
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-1">
                <input type="button" id="setSchedule" class="btn btn-default" onclick="SaveScheduling()" value="設定" />
            </div>
            <div class="col-md-1">
                <input type="button" id="revertSchedule" class="btn btn-default" onclick="RevertScheduling()" value="元に戻す" />
            </div>
        </div>
    </div>
</div>

<!-- 履歴テーブル -->
<div id="history-form">
    <div class="container">
        <table class="table" id="history">
            <thead id="historyHeader"></thead>
            <tbody id="historyData"></tbody>
        </table>
    </div>
</div>

<!-- 応答メッセージ -->
@{
    if (Model.ProcessFinished)
    {
        <script type="text/javascript">
            alert('@Model.Message');
        </script>
    }
}

<script type="text/javascript">
    var comNotifier;
    var dialog;

    // 変更前のスケジュール設定
    var org_schedule = {};

    window.onload = function () {
        DisableControls(false);

        comNotifier = $.connection.comHub;

        // サーバー側からのメッセージを受信する部分
        comNotifier.client.sendMessage = function (type, message, args) {
            if (type == "PROGRESS_BAR") {
                var rate = parseInt(args[0]);
                var id = args[1];
                UpdateProgress(message, rate, id);
            }
            else if (type == "HISTORY") {
                ShowHistoryDialog(message, args);
            }
            else if (type == "SCHEDULING") {
                SetScheduleFinished(message);
            }
        };

        // 接続完了時の処理
        $.connection.hub.start().done(function () {
            SendMessageToServer("", "", [""]);
        });

        dialog = $("#history-form").dialog({
            autoOpen: false,
            title: "History",
            height: 400,
            width: 650,
            modal: true,
            buttons: {
                "Close": function () {
                    dialog.dialog("close");
                }
            },
            close: function () {
                $("#historyHeader").empty();
                $("#historyData").empty();
            }
        });

        // スケジュール設定UIの初期表示
        ScheduleSettingUISwitch($("#schedule-select").val());
        // 変更前のスケジュール設定を保存しておく
        GetScheduleSettings(org_schedule);
    };

    // サーバーへのメッセージ送信
    function SendMessageToServer(type, msg, args) {
        comNotifier.server.getMessage(type, msg, args);
    }

    // メッセージ表示
    function ShowMessage(message) {
        alert(message);
    }

    // ******* スケジューリング *******
    // スケジューリングの種別設定変更
    function ScheduleTypeChanged() {
        ScheduleSettingUISwitch($("#schedule-select").val());
    }
    // スケジュール設定UIの表示・非表示
    function ScheduleSettingUISwitch(type) {
        if (type == "none") {
            $("#schedule-oneTime").css("display", "none");
            $("#schedule-daily").css("display", "none");
            $("#schedule-day").css("display", "none");
            $("#schedule-detail").css("display", "none");
        }
        else if (type == "oneTime") {
            $("#schedule-oneTime").css("display", "block");
            $("#schedule-daily").css("display", "none");
            $("#schedule-day").css("display", "none");
            $("#schedule-detail").css("display", "none");
        }
        else if (type == "date") {
            $("#schedule-oneTime").css("display", "none");
            $("#schedule-daily").css("display", "block");
            $("#schedule-day").css("display", "none");
            $("#schedule-detail").css("display", "none");
        }
        else if (type == "day") {
            $("#schedule-oneTime").css("display", "none");
            $("#schedule-daily").css("display", "none");
            $("#schedule-day").css("display", "block");
            $("#schedule-detail").css("display", "none");
        }
        else if (type == "detail") {
            $("#schedule-oneTime").css("display", "none");
            $("#schedule-daily").css("display", "none");
            $("#schedule-day").css("display", "none");
            $("#schedule-detail").css("display", "block");
        }
    }
    // UI上で編集されたスケジュール設定をオブジェクトに読み込む
    function GetScheduleSettings(schData)
    {
        schData.type = $("#schedule-select").val();
        schData.schOneTime = $("#schedule-oneTime-input").val();
        schData.schDailyInterval = $("#schedule-daily-interval").val();
        schData.schDailyTime = $("#schedule-daily-time").val();
        schData.schMon = $('[name=ExecMonday]').prop("checked");
        schData.schTue = $('[name=ExecTuesday]').prop("checked");
        schData.schWed = $('[name=ExecWendnesday]').prop("checked");
        schData.schThr = $('[name=ExecThursday]').prop("checked");
        schData.schFri = $('[name=ExecFriday]').prop("checked");
        schData.schSat = $('[name=ExecSurtarday]').prop("checked");
        schData.schSun = $('[name=ExecSunday]').prop("checked");
        schData.schDayTime = $("#schedule-day-time").val();
        schData.schCron = $("#schedule-cron").val();
    }
    // オブジェクト中のスケジュールデータをUIに反映する
    function SetScheduleSettings(schData)
    {
        $("#schedule-select").val(schData.type);
        $("#schedule-oneTime-input").val(schData.schOneTime);
        $("#schedule-daily-interval").val(schData.schDailyInterval);
        $("#schedule-daily-time").val(schData.schDailyTime);
        $('[name=ExecMonday]').prop("checked", schData.schMon);
        $('[name=ExecTuesday]').prop("checked", schData.schTue);
        $('[name=ExecWendnesday]').prop("checked", schData.schWed);
        $('[name=ExecThursday]').prop("checked", schData.schThr);
        $('[name=ExecFriday]').prop("checked", schData.schFri);
        $('[name=ExecSurtarday]').prop("checked", schData.schSat);
        $('[name=ExecSunday]').prop("checked", schData.schSun);
        $("#schedule-day-time").val(schData.schDayTime);
        $("#schedule-cron").val(schData.schCron);
    }
    // スケジュール設定の保存
    function SaveScheduling() {
        var scheData = {};
        GetScheduleSettings(scheData);

        var schArgs = [scheData.type, scheData.schOneTime, scheData.schDailyInterval, scheData.schDailyTime, scheData.schMon, scheData.schTue, scheData.schWed, scheData.schThr, scheData.schFri, scheData.schSat, scheData.schSun, scheData.schDayTime, scheData.schCron];

        SendMessageToServer("SCHEDULING", "SaveScheduling", schArgs);
    }
    // スケジュール設定を元に戻す
    function RevertScheduling() {
        SetScheduleSettings(org_schedule);
        ScheduleTypeChanged();
    }
    // スケジュール設定完了
    function SetScheduleFinished(message) {
        GetScheduleSettings(org_schedule);
        alert(message);
    }
    // ******* スケジューリング *******

    // ******* 履歴 *******
    // 履歴データの取得
    function GetHistoryData(historyKind) {
        SendMessageToServer("HISTORY", "GetHistoryData", [historyKind]);
    }
    // 取得した履歴データの表示
    function ShowHistoryDialog(historyKind, historyData) {
        var title = "クロール履歴";
        if (historyKind == "word2vec") {
            title = "機械学習履歴"
        }
        $('#history-form').dialog('option', 'title', title);

        var headerTag = GenerateHeader(historyKind);
        $('#historyHeader').append(headerTag);

        var recordTag = "";

        for (var i = 0; i < historyData.length; i++) {
            var dataArray = historyData[i].split(",");
            recordTag += "<tr>"
            for (var j = 0; j < dataArray.length; j++) {
                recordTag += "<td>" + dataArray[j] + "</td>";
            }
            recordTag += "</tr>"

            $('#historyData').append(recordTag);
            recordTag = ""
        }

        dialog.dialog("open");
    }
    // 履歴ヘッダタグ生成
    function GenerateHeader(historyKind) {
        var header;
        if (historyKind == "Crawl") {
            header = "<tr><th>日時</th><th>クロールファイル数</th><th>Insertファイル数</th><th>キャンセル</th></tr>";
        }
        else if (historyKind == "word2vec") {
            header = "<tr><th>日時</th><th>キャンセル</th></tr>";
        }
        return header;
    }
    // ******* 履歴 *******

    // ******* クロールと機械学習 *******
    // プログレスバーの更新
    function UpdateProgress(message, count, id) {
        // クロール・機械学習実行の途中で設定画面を表示したときでも
        // 画面を非活性状態にするために、常にこれを実行しておく。
        DisableControls(true, id);

        if (count < 0 || count > 100) {
            var dispRate = 100;
            if (count < 0) {
                dispRate = 0;
            }

            $(id).find(".progress-bar").css({ 'width': dispRate + '%' });
            $(id).find(".progress-rate").html(message);

            // 処理が完了したら、プログレスバーの表示をアニメーション → 固定表示に切り替える
            // 100ではなく、101が処理終了を表すコード。-2はキャンセルされたことを示すコード。
            if (count == 101 || count == -2) {
                $(id).find("#progressType").removeClass("progress-striped active");

                var result = JdugeStartMachineLearning(id);
                if (!result)
                    DisableControls(false);
            }

            return;
        }

        // プログレスバーの表示をストライプ＆アニメーションに変更する。
        if (!$(id).find("#progressType").hasClass("progress-striped active")) {
            $(id).find("#progressType").addClass("progress-striped active");
        }

        $(id).find(".progress-bar").css({ 'width': count + '%' });
        $(id).find(".progress-rate").html(count + '%');
    }

    // 機械学習をスタートさせるかどうかの判断
    function JdugeStartMachineLearning(id) {
        if (id != "#crawlProgressBar")
            return false;

        var machineLearning = $("#execMachineLearningOption").val();

        // スタートさせる選択をしていても、ここから実行することはしない。サーバー側から実行する。
        // UIの活性・非活性の変更とプログレスバーへの処理準備中表示をするのみ。
        if (machineLearning == 1) {
            DisableControls(true, "#machineLearningProgressBar");
            UpdateProgress("処理開始の準備中です。", -3, "#machineLearningProgressBar");
            return true;
        }

        return false;
    }

    // クロール開始
    function StartCrawl() {
        DisableControls(true, "#crawlProgressBar");

        UpdateProgress("処理開始の準備中です。", -3, "#crawlProgressBar")

        // クロール後に機械学習を実行するかどうか。
        var machineLearning = $("#execMachineLearningOption").val();
        // サーバーへ渡すパラメータの生成
        var args = ["#crawlProgressBar", "#machineLearningProgressBar", machineLearning];

        SendMessageToServer("PROGRESS_BAR", "StartCrawl", args);
    }

    // クロールキャンセル
    function CancelCrawl() {
        DisableControls(false);

        SendMessageToServer("PROGRESS_BAR", "CancelCrawl", [""]);
    }

    // 機械学習開始
    function StartMachineLearning() {
        DisableControls(true, "#machineLearningProgressBar");

        UpdateProgress("処理開始の準備中です。", -3, "#machineLearningProgressBar");

        var args = ["#machineLearningProgressBar"];

        SendMessageToServer("PROGRESS_BAR", "StartMachineLearning", args);
    }

    // 機械学習キャンセル
    function CancelMachineLearning() {
        DisableControls(false);

        SendMessageToServer("PROGRESS_BAR", "CancelMachineLearning", [""]);
    }

    // UIの活性・非活性制御
    function DisableControls(enabled, id) {
        // UIコントロール（キャンセルボタン以外）
        $("#crawlFoldersTextBox").prop('disabled', enabled);
        $("#folderApplyButton").prop('disabled', enabled);
        $("#execMachineLearningOption").prop('disabled', enabled);
        $("#crawlStartButton").prop('disabled', enabled);
        $("#machineLearningStartButton").prop('disabled', enabled);

        // キャンセルボタン
        if (id == "#crawlProgressBar") {
            $("#crawlCancelButton").prop('disabled', !enabled);
            $("#machineLearningCancelButton").prop('disabled', enabled);
        }
        else if (id == "#machineLearningProgressBar") {
            $("#crawlCancelButton").prop('disabled', enabled);
            $("#machineLearningCancelButton").prop('disabled', !enabled);
        }
        else {
            $("#crawlCancelButton").prop('disabled', !enabled);
            $("#machineLearningCancelButton").prop('disabled', !enabled);
        }

        var schedulingInput = $("#scheduling").find("input");
        for (var i = 0; i < schedulingInput.length; i++) {
            schedulingInput[i].disabled = enabled;
        }

        $("#schedule-select").prop('disabled', enabled);
    }
    // ******* クロールと機械学習 *******

</script>