@model DocSearch.Models.SetupModel

@{
    ViewBag.Title = "Setup";
}

<h2 style="margin-bottom: 30px">設定画面</h2>

<!-- クロール先フォルダの指定 -->
<div class="ds-container">
    <h4>クロール先のフォルダの指定</h4>
    @using (Html.BeginForm("SetupCrawlFolder", "Setup", FormMethod.Post))
    {
        <div class="form-group">
            <label class="control-label">クロール先のフォルダを指定して下さい。改行で複数のフォルダを指定出来ます。</label>
            @Html.TextAreaFor(m => m.CrawlFolders, new { @class = "form-control", rows = "5" })
        </div>
        <button type="submit" class="btn btn-default right">適用</button>
    }
</div>

<!-- クロール開始 -->
<div class="ds-container">
    <h4>クロール処理の開始</h4>
    @using (Html.BeginForm("StartCrawl", "Setup", FormMethod.Post))
    {
        <div class="form-group">
            <div class="row">
                <div class="col-md-3">
                    <label class="control-label">クロール後の関連語学習</label>
                </div>
                <div class="col-md-2">
                   @Html.DropDownListFor(m => m.ExecMachineLearning,
                     new SelectListItem[] {
                        new SelectListItem() { Value="0", Text="しない" },
                        new SelectListItem() { Value="1", Text="する" }
                     },
                     new { @class="form-control", id="execMachineLearningOption" })
                </div>
                <div class="col-md-1">
                    <button type="button" class="btn btn-default" onclick="StartCrawl()">開始</button>
                </div>
                <div class="col-md-1">
                    <button type="button" class="btn btn-default" onclick="CancelCrawl()">キャンセル</button>
                </div>
            </div>
            <br />
            <div class="row">
                <div id="crawlProgressBar">
                    <div class="col-md-7">
                        <div class="progress progress-striped active" id="progressType">
                            <div class="progress-bar" id="progressBar" role="progressbar" style="width: 0%;">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <label class="progress-rate" id="progressRate"></label>
                    </div>
                </div>
            </div>
       </div>
    }
</div>

<div class="ds-container">
    <h4>関連語学習の開始</h4>
    @using (Html.BeginForm("StartMachineLearning", "Setup", FormMethod.Post))
    {
        <div class="form-group">
            <div class="row">
                <div class="col-md-5">
                    <label class="control-label">関連語を表示する人工知能の学習の実行</label>
                </div>
            </div>
            <button type="submit" class="btn btn-default" onclick="ShowProcessingMessage('processingMessage2', '処理中です...')">開始</button>&nbsp;&nbsp;<span id="processingMessage2"></span>
        </div>
    }
</div>

<script type="text/javascript">
    var progressNotifier;

    window.onload = function () {
        progressNotifier = $.connection.progressHub;

        // サーバー側からのメッセージを受信する部分
        progressNotifier.client.sendMessage = function (message, count, id) {
            UpdateProgress(message, count, id);
        };

        // 接続完了時の処理
        $.connection.hub.start().done(function () {
            progressNotifier.server.getMessage("", "", "");
        });

    };

    function UpdateProgress(message, count, id) {
        if (count == -1 || count == 100) {
            $(id).find(".progress-bar").css({ 'width': 100 + '%' });
            $(id).find(".progress-rate").html(message);

            if (count == 100) {
                $(id).find("#progressType").removeClass("progress-striped active");
            }

            return;
        }

        $(id).find(".progress-bar").css({ 'width': count + '%' });
        $(id).find(".progress-rate").html(count + '%');
    }

    // サーバーへのメッセージ送信
    function SendMessageToServer(msg, arg1, arg2) {
        progressNotifier.server.getMessage(msg, arg1, arg2);
    }


    function StartCrawl()
    {
        var machineLearning = $("#execMachineLearningOption").val();
        SendMessageToServer("StartCrawl", machineLearning, "#crawlProgressBar");
    }

    function CancelCrawl()
    {
        SendMessageToServer("CancelCrawl", "", "");
    }


</script>

<!-- 応答メッセージ -->
@{
    if (Model.ProcessFinished)
    {
        <script type="text/javascript">
            alert('@Model.Message');
        </script>
    }
}